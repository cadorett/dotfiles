set nocompatible               " be iMproved
filetype off                   " required!

set shell=/opt/boxen/homebrew/bin/zsh
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"""""""""""""""""""""""""""""""""""""
" PLUGINS
"""""""""""""""""""""""""""""""""""""

Plugin 'gmarik/vundle'

"" Languages
Plugin 'cocoa.vim' " Cocoa syntax highlighting, code completion, documentation lookup, etc.
Plugin 'groenewege/vim-less' " Less CSS shenanigans
Plugin 'kchmck/vim-coffee-script' " CoffeeScript syntax, indentation, compiling, etc.
Plugin 'pangloss/vim-javascript' " Improved JavaScript syntax support, indentation, etc.
Plugin 'plasticboy/vim-markdown' " DAE Markdown?
Plugin 'rodjek/vim-puppet' " Pöppet
Plugin 'vim-ruby/vim-ruby' " Use an up-to-date version of the Ruby plugin instead of the built in one

"" Tools
Plugin 'airblade/vim-gitgutter' " shows a git diff in the gutter (sign column)
Plugin 'godlygeek/tabular' " aling my code plox
Plugin 'rking/ag.vim' " RIP ack
Plugin 'scrooloose/syntastic' " check code syntax
Plugin 'sjl/gundo.vim' " visualizes the undo tree; I use this every day!
Plugin 'tpope/vim-commentary' " comment code out the fast way
Plugin 'tpope/vim-dispatch' " run stuff async
Plugin 'tpope/vim-fugitive' " Git magic
Plugin 'tpope/vim-repeat' " enable repeating supported plugin maps with .
Plugin 'tpope/vim-surround' " tool to change and add surroundings in pair

"" Navigation
Plugin 'christoomey/vim-tmux-navigator' " easier tmux navigating with Ctrl+h/j/k/l
Plugin 'kien/ctrlp.vim' " simple file browsing magic
Plugin 'nacitar/a.vim' " alternate files quickly (.c --> .h etc) via :A

"" Automagic
Plugin 'docunext/closetag.vim' " automagically suggest closing HTML tag
Plugin 'ervandew/supertab' " autocompletion tab magic
Plugin 'raimondi/delimitMate' " provides insert mode auto-completion for quotes, parens, brackets, etc.
Plugin 'tpope/vim-endwise' " wisely add end in ruby, endfunction/endif/more in vim script, etc.

"" Display
Plugin 'bling/vim-airline' " lean & mean status/tabline for vim that's light as air
Plugin 'ntpeters/vim-better-whitespace' " highlights trailing whitespaces

Plugin 'chriskempson/vim-tomorrow-theme' " neat theme for vim

"""""""""""""""""""""""""""""""""""""
" CONFIG
"""""""""""""""""""""""""""""""""""""

filetype plugin indent on

"" Look and feel
color Tomorrow-Night
syntax enable
set encoding=utf-8
set number
set ruler       " show the cursor position all the time
set scrolloff=3 " provide some context when editing
set foldlevelstart=20
let g:vim_markdown_folding_disabled=1
"autocmd BufReadPost,FileReadPost,BufNewFile * call system("tmux rename-window %")

au BufNewFile,BufRead *.pys set filetype=python

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" http://robots.thoughtbot.com/how-to-copy-and-paste-with-tmux-on-mac-os-x
if has('neovim')
  let s:python_host_init = 'python -c "import neovim; neovim.start_host()"'
  let &initpython = s:python_host_init
  let &initclipboard = s:python_host_init
  set unnamedclip " Automatically use clipboard as storage for the unnamed register
else
  set clipboard=unnamed
endif
" allow copying to tmux buffer
"set clipboard=

"" Searching
set hlsearch                      " highlight matches
set incsearch                     " incremental searching
set ignorecase                    " searches are case insensitive...
set smartcase                     " ... unless they contain at least one capital letter

"" Whitespace
set wrap                          " wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
"set list                          " Show invisible characters

""" vim-airline
"" detection of whitespace errors
let g:airline#extensions#whitespace#enabled = 1
" customize the whitespace symbol
let g:airline#extensions#whitespace#symbol = '!'
" configure which whitespace checks to enable
let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing' ]
" configure whether a message should be displayed
let g:airline#extensions#whitespace#show_message = 1
" configure the formatting of the warning messages
let g:airline#extensions#whitespace#trailing_format = 'trailing[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mixed-indent[%s]'

" airline tabline
let g:airline#extensions#tabline#enabled = 1
" fancy airline statusbar
let g:airline_powerline_fonts = 1
set laststatus=2

"" ctrlp
let g:ctrlp_custom_ignore = '\v[\/]coverage$' " ignore folder

"" Ruby
let g:ruby_path = system('echo $BOXEN_HOME/rbenv/shims')

"" vim-rspec
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
let g:rspec_command = "Dispatch rspec {spec}"

"" Paths
silent !mkdir -p ~/.vim/_backup ~/.vim/_temp ~/.vim/_undo
set backupdir=~/.vim/_backup    " where to put backup files.
set directory=~/.vim/_temp      " where to put swap files.
set undodir=~/.vim/_undo        " where to save undo histories

"" undo history
set undofile
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

"" Gundo
nnoremap <F6> :GundoToggle<CR>

set backspace=indent,eol,start

"" Completion
" Tab on the command line will show a menu to complete buffer and file names
set wildchar=<Tab> wildmenu wildmode=full
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=coverage/**
set wildignore+=*.png,*.jpg,*.gif
set wildcharm=<C-Z>
nnoremap <F10> :b <C-Z>

" paste mode toggle
map <F4> :set invpaste<CR>

" toggle number
nmap <F5> :set number! number?<CR>

" for insert mode
imap <S-Tab> <Esc><<i

" NerdTree
"autocmd vimenter * if !argc() | NERDTree | endif
map <C-n> :NERDTreeToggle<CR>

" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" git gutter symbols
let g:gitgutter_sign_added = '⇒'
let g:gitgutter_sign_modified = '⇔'
let g:gitgutter_sign_removed = '⇐'
let g:gitgutter_sign_modified_removed = '⇐'

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" nice and sexy profiling hotkeys
nnoremap <silent> <leader>DD :exe ":profile start profile.log"<cr>:exe ":profile func *"<cr>:exe ":profile file *"<cr>
nnoremap <silent> <leader>DQ :exe ":profile pause"<cr>:noautocmd qall!<cr>

" tags
:set tags=./.tags;
:let g:easytags_dynamic_files = 2

" http://superuser.com/questions/195022/vim-how-to-synchronize-nerdtree-with-current-opened-tab-file-path
map <leader>r :NERDTreeFind<cr>

set timeoutlen=1000 ttimeoutlen=0

"if has("mouse")
"  set mouse=a
"endif

:let g:syntastic_html_validator_parser = 'html5'
:let g:syntastic_mode_map = { 'mode': 'active',
                            \ 'passive_filetypes': ['puppet'] }

:let g:indentLine_char = '︙'
:let g:indentLine_color_term = 239

let g:clang_library_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib'
